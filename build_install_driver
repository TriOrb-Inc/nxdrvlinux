#!/bin/bash -e
. ./scripts/getoptions.sh

parser_definition() {
    setup   REST help:usage -- "Usage: build_install_driver.sh [options]" ''
    msg -- 'Options:'
    param  BUILDDIR   -b --builddir                    init:="./tmp_build/"       -- "The build directory"
    flag   YESALL     -y --yes       on:true of:false  init:=false                -- "Yes all"
    flag   ENABLESPI  -s --spi       on:true of:false  init:=false                -- "Enable SPI"
    disp    :usage    -h --help
}
eval "$(getoptions parser_definition) exit 1"

# check if directories contain white spaces...
invalid_path=$(pwd | { grep " " || true; } )
if [ "${invalid_path}" != "" ]; then
    echo "Error - path contains spaces (\"${PWD}\")! Please use path without."
    exit 1
fi
invalid_path=$(echo ${BUILDDIR} | { grep " " || true; } )
if [ "${invalid_path}" != "" ]; then
    echo "Error - path contains spaces (\"${BUILDDIR}\")! Please use path without."
    exit 1
fi

if [ -d "${BUILDDIR}/libcifx" ] || [ -d "${BUILDDIR}/uio_netx" ]; then    
    if "${YESALL}"; then
      delete_files="y"
    else  
      echo "********************************************************************************"
      echo "NOTE: The build folder (\"${BUILDDIR}\") is not empty! Force overwrting (yes=y)?"
      echo "      Or pass a new build folder (./build_install_driver [my_build_folder]."
      echo "********************************************************************************"
      read delete_files
    fi
    if [ "${delete_files}" = "y" ]; then
      echo "...deleting build folder!"
      rm -rf "${BUILDDIR}/libcifx"
      rm -rf "${BUILDDIR}/uio_netx" 
    else
      echo "...canceled build process!"
      exit 1
    fi
else
  mkdir -p "${BUILDDIR}"
fi

driver_src=$(dirname $(realpath $0))
scripts_dir="${driver_src}/scripts"

cur_path=$PWD
kernelversion=""
ret=0

install_step="uio_netx"
while [ "$install_step" != "stop" ]
do
case $install_step in
error)
echo "************************************************************"
echo "**** An error occured during the installation            ***"
echo "************************************************************"
echo "Please check the error message in the previous steps."
echo "When the problem is fixed restart the installation."
install_step="stop"
ret=1
;;
uio_netx)
install_step="firmware"
mkdir -p "${BUILDDIR}/uio_netx"
echo "************************************************************"
echo "**** Start building kernel module uio_netx               ***"
echo "************************************************************"
if ! "${scripts_dir}/"install_uio_netx build "${BUILDDIR}/uio_netx" ${YESALL}; then    # build module
  echo "Error building kernel module!"
  install_step="error"
fi
if ! "${scripts_dir}/"install_uio_netx install "${BUILDDIR}/uio_netx" ${YESALL}; then  # install module
  echo "Error installing kernel module!"
  install_step="error"
fi
;;
firmware)
install_step="libcifx"
echo "************************************************************"
echo "**** Installing kernel module and firmware               ***"
echo "************************************************************"
install_step="libcifx"
if ! "${scripts_dir}/"install_firmware install ${YESALL}; then        # install firmware
  echo "Error installing firmware!"
  install_step="error"
fi
if ! "${scripts_dir}/"install_uio_netx update ${YESALL}; then         # load driver
  echo "Error updating module dependencies!"
  install_step="error"
fi
if ! "${scripts_dir}/"install_uio_netx unload ${YESALL}; then
  echo "Error unloading driver!"
  install_step="error"
fi
if ! "${scripts_dir}/"install_uio_netx load ${YESALL}; then
    echo "Error loading driver!"
    install_step="error"
fi
;;
libcifx)
echo "************************************************************"
echo "**** Building and installing user space library libcifx  ***"
echo "************************************************************"
mkdir -p "${BUILDDIR}/libcifx"
"${scripts_dir}/"install_libcifx "${BUILDDIR}/libcifx" ${YESALL} ${ENABLESPI}
install_step="stop"
;;
esac
done  
cd ..

exit $ret
